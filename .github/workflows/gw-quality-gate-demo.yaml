
name: Quality Gate Workflow

on:
  workflow_dispatch:  # This allows the workflow to be triggered manually
    inputs:
      commit_id:
        description: "Commit ID to send to CICD Manager"
        required: true
        default: "a69563594f226af4aa768b281fb393564704ab88"   

jobs:
  QualityGate-GitActionWorkflow:
    runs-on: windows-latest

    steps:
      - name: Display a message
        run: echo "This workflow was triggered from GuideWire quality Gates!"

      - name: Show commitId input
        run: echo "CommitId input was ${{ github.event.inputs.commit_id }}"

      - name: Run GW Tests
        run: sleep 5

      - name: Security and Vulnerbality Check
        run: sleep 5

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Download Gosu Distribution
        shell: bash
        run: |
          echo "Downloading Gosu distribution..."
          curl -L -o gosu.zip http://search.maven.org/remotecontent?filepath=org/gosu-lang/gosu/gosu/1.14.16/gosu-1.14.16-full.zip
          unzip gosu.zip -d gosu_dist
  
      - name: Find gosu.cmd
        id: find_gosu
        shell: pwsh
        run: |
            $gosu = Get-ChildItem -Path gosu_dist -Recurse -Filter "gosu.cmd" | Select-Object -First 1
            if (-not $gosu) {
              Write-Error "gosu.cmd not found!"
              exit 1
            }
            echo "Found gosu.cmd at $($gosu.FullName)"
            echo "GOSU_CMD=$($gosu.FullName)" | Out-File -FilePath $Env:GITHUB_ENV -Append
  
      - name: Clean previous builds
        shell: cmd
        run: |
          echo Cleaning old build artifacts...
          if exist dist rmdir /s /q dist
      
      - name: Validate Gosu Files
        shell: cmd
        run: |
          echo Validating all Gosu files...
          for /R src %%f in (*.gs) do (
            echo Checking syntax of %%f
            call "%GOSU_CMD%" -c %%f || exit /b 1
          )
      
      - name: Build Gosu Applications
        shell: cmd
        run: |
          echo Building Gosu applications...
          if exist dist rmdir /s /q dist
          if exist build-app.bat (
            call build-app.bat
          ) else (
            echo "⚠ build-app.bat not found, skipping build."
          )
  
      - name: Run PII scan on all .gs files
        shell: cmd
        continue-on-error: true
        run: |
          echo Running PII scan on all .gs files...
           rem Create a temporary batch file to scan files in small batches
          setlocal enabledelayedexpansion
           set batchFiles=
          for %%f in (dist\*.gs) do (
          set batchFiles=!batchFiles! "%%f"
          rem If batch reaches 2 files, run scanner and reset
          for /f %%i in ("!batchFiles!") do set /a count+=1
          if !count! geq 2 (
              call run_scanner.bat !batchFiles! || echo "⚠ Scanner returned an error for this batch"
              set batchFiles=
              set count=0
            )
          )
          rem Scan remaining files if any
          if defined batchFiles (
          call run_scanner.bat !batchFiles! || echo "⚠ Scanner returned an error for last batch"
          )
  
          echo PII scan complete!
          endlocal
  
  
      - name: Run PII Scan
        shell: cmd
        run: |
          echo Running PII Scanner...
          set LOGFILE=%GITHUB_WORKSPACE%\pii-scan-report.log
          if exist "%LOGFILE%" del "%LOGFILE%"
                  rem scan root .gs files
          for %%f in ("%GITHUB_WORKSPACE%\*.gs") do (
            echo Scanning %%f >> "%LOGFILE%"
            call run_scanner.bat "%%f" >> "%LOGFILE%" 2>&1 || echo "⚠ Scanner error for %%f" >> "%LOGFILE%"
            echo. >> "%LOGFILE%"
          )
  
          rem scan dist folder
          if exist "%GITHUB_WORKSPACE%\dist" (
            for %%f in ("%GITHUB_WORKSPACE%\dist\*.gs") do (
              echo Scanning %%f >> "%LOGFILE%"
              call run_scanner.bat "%%f" >> "%LOGFILE%" 2>&1 || echo "⚠ Scanner error for %%f" >> "%LOGFILE%"
              echo. >> "%LOGFILE%"
            )
          )
  
          echo PII scan complete! Report saved to %LOGFILE%
          exit /b 0
      
      - name: Upload PII report
        uses: actions/upload-artifact@v4
        with:
          name: pii-reports
          path: ${{ github.workspace }}\pii-scan-report.log
          
      - name: Display Report Summary
        shell: cmd
        run: |
          if exist pii-scan-report.log (
          echo PII Scan Report Summary:
          type pii-scan-report.log
          ) else (
          echo "PII scan report not found!"
          )
    
      - name: Run a script
        run: |
          echo "All Test Cases passed successfully."     
     
      - name: Call CICD Manager Quality Gate API
        shell: pwsh
        run: |
          $commitId = "${{ github.event.inputs.commit_id }}"
          $headers = @{
            "Authorization" = "Bearer ${{ secrets.CICD_TOKEN }}"
            "Content-Type"  = "application/json"
          }

          $body = @{
            artifact = @{
              type = "COMMIT"
              id   = $commitId
            }
            status  = "SUCCESSFUL"
            url     = "https://bitbucket.example.com/browse/GWCP-0000"
            comment = "Verification Passed from GitHub Actions"
          } | ConvertTo-Json -Depth 3

          $response = Invoke-RestMethod -Uri "https://cicd-manager-service.api.omega2-andromeda.guidewire.net/api/v3/tenants/valuemom/starsystems/gwcp/applications/cm/quality-gates/usaaqualitygatedemo/verifications" `
                                        -Method POST `
                                        -Headers $headers `
                                        -Body $body `
                                        -ErrorAction Stop

          Write-Host "✅ CICD Manager API call successful"
          Write-Host $response | ConvertTo-Json -Depth 5

